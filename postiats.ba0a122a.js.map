{"mappings":";;;;;;;AAQA,IAAIA,EAAO,CACTC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CACR,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,cAG3CC,EAAW,CACbC,aAAc,QACdC,aAAc,UACdC,SAAU,CACR,UACA,WACA,UACA,UACA,WACA,cACA,YACA,eACA,KACA,MACA,SACA,QACA,WACA,WACA,WACA,WACA,WACA,YACA,eACA,KACA,MACA,SACA,SACA,SACA,YACA,KACA,MACA,MACA,OACA,QACA,QACA,SACA,KACA,OACA,OACA,SACA,KACA,QACA,SACA,SACA,SACA,UACA,UACA,YACA,YACA,cACA,SACA,MACA,QACA,SACA,WACA,SACA,UACA,UACA,WACA,KACA,KACA,MACA,MACA,QACA,UACA,MACA,SACA,SACA,SACA,UACA,UACA,MACA,UACA,UACA,UACA,UACA,WACA,cACA,QACA,MACA,QACA,OACA,QACA,OACA,WACA,WACA,WACA,YACA,gBAEFC,aAAc,CACZ,SACA,UACA,UACA,cACA,WACA,WACA,eACA,eACA,eACA,eACA,eACA,UACA,WACA,UACA,iBACA,UACA,YACA,YACA,WACA,cACA,cACA,cACA,OACA,SACA,UACA,QACA,UACA,WACA,OACA,SACA,UACA,UACA,YACA,aACA,OACA,SACA,UACA,SACA,WACA,YACA,SACA,YACA,SACA,YACA,cACA,eACA,aACA,iBACA,kBAEFC,aAAc,CACZ,MACA,SACA,UACA,QACA,QACA,WACA,YACA,QACA,SACA,SACA,SACA,SACA,UACA,SACA,UACA,WACA,WACA,UACA,YACA,aAEFC,uBAAwB,CACtB,OACA,OACA,MACA,QACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,MACA,OACA,MACA,QACA,OACA,aACA,aACA,YACA,YACA,YACA,WACA,QACA,QACA,QACA,OACA,QACA,QACA,OACA,SACA,SACA,QACA,UACA,UACA,SACA,aACA,aACA,YACA,YACA,YACA,WACA,QACA,QACA,OACA,QACA,QACA,OACA,QACA,SACA,SACA,WACA,UACA,eACA,YACA,OACA,MACA,SACA,SAEFC,eAAgB,CACd,OACA,SACA,OACA,MACA,QACA,OACA,OACA,OACA,OACA,QACA,SACA,UAEFC,iBAAkB,CAChB,IACA,MACA,MACA,MACA,SACA,SACA,SACA,MACA,MACA,KAEFC,UAAW,CACT,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,MACA,KACA,MACA,OACA,MACA,QACA,IACA,IACA,KACA,KACA,KACA,OACA,KACA,OAEFd,SAAU,CACR,CAAEE,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,yBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,mBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,oBACjC,CAAEb,KAAM,KAAMC,MAAO,IAAKY,MAAO,oBACjC,CAAEb,KAAM,IAAKC,MAAO,IAAKY,MAAO,mBAChC,CAAEb,KAAM,IAAKC,MAAO,IAAKY,MAAO,oBAChC,CAAEb,KAAM,IAAKC,MAAO,IAAKY,MAAO,yBAChC,CAAEb,KAAM,IAAKC,MAAO,IAAKY,MAAO,oBAElCC,QAAO,wBACPC,SAAQ,YACRC,SAAQ,iBACRC,SAAQ,yBACRC,MAAK,QACLC,UAAS,UACTC,OAAM,cACNC,WAAU,WACVC,MAAK,SAC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","sources":["node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/postiats/postiats.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"{\", close: \"}\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  tokenPostfix: \".pats\",\n  defaultToken: \"invalid\",\n  keywords: [\n    \"abstype\",\n    \"abst0ype\",\n    \"absprop\",\n    \"absview\",\n    \"absvtype\",\n    \"absviewtype\",\n    \"absvt0ype\",\n    \"absviewt0ype\",\n    \"as\",\n    \"and\",\n    \"assume\",\n    \"begin\",\n    \"classdec\",\n    \"datasort\",\n    \"datatype\",\n    \"dataprop\",\n    \"dataview\",\n    \"datavtype\",\n    \"dataviewtype\",\n    \"do\",\n    \"end\",\n    \"extern\",\n    \"extype\",\n    \"extvar\",\n    \"exception\",\n    \"fn\",\n    \"fnx\",\n    \"fun\",\n    \"prfn\",\n    \"prfun\",\n    \"praxi\",\n    \"castfn\",\n    \"if\",\n    \"then\",\n    \"else\",\n    \"ifcase\",\n    \"in\",\n    \"infix\",\n    \"infixl\",\n    \"infixr\",\n    \"prefix\",\n    \"postfix\",\n    \"implmnt\",\n    \"implement\",\n    \"primplmnt\",\n    \"primplement\",\n    \"import\",\n    \"let\",\n    \"local\",\n    \"macdef\",\n    \"macrodef\",\n    \"nonfix\",\n    \"symelim\",\n    \"symintr\",\n    \"overload\",\n    \"of\",\n    \"op\",\n    \"rec\",\n    \"sif\",\n    \"scase\",\n    \"sortdef\",\n    \"sta\",\n    \"stacst\",\n    \"stadef\",\n    \"static\",\n    \"staload\",\n    \"dynload\",\n    \"try\",\n    \"tkindef\",\n    \"typedef\",\n    \"propdef\",\n    \"viewdef\",\n    \"vtypedef\",\n    \"viewtypedef\",\n    \"prval\",\n    \"var\",\n    \"prvar\",\n    \"when\",\n    \"where\",\n    \"with\",\n    \"withtype\",\n    \"withprop\",\n    \"withview\",\n    \"withvtype\",\n    \"withviewtype\"\n  ],\n  keywords_dlr: [\n    \"$delay\",\n    \"$ldelay\",\n    \"$arrpsz\",\n    \"$arrptrsize\",\n    \"$d2ctype\",\n    \"$effmask\",\n    \"$effmask_ntm\",\n    \"$effmask_exn\",\n    \"$effmask_ref\",\n    \"$effmask_wrt\",\n    \"$effmask_all\",\n    \"$extern\",\n    \"$extkind\",\n    \"$extype\",\n    \"$extype_struct\",\n    \"$extval\",\n    \"$extfcall\",\n    \"$extmcall\",\n    \"$literal\",\n    \"$myfilename\",\n    \"$mylocation\",\n    \"$myfunction\",\n    \"$lst\",\n    \"$lst_t\",\n    \"$lst_vt\",\n    \"$list\",\n    \"$list_t\",\n    \"$list_vt\",\n    \"$rec\",\n    \"$rec_t\",\n    \"$rec_vt\",\n    \"$record\",\n    \"$record_t\",\n    \"$record_vt\",\n    \"$tup\",\n    \"$tup_t\",\n    \"$tup_vt\",\n    \"$tuple\",\n    \"$tuple_t\",\n    \"$tuple_vt\",\n    \"$break\",\n    \"$continue\",\n    \"$raise\",\n    \"$showtype\",\n    \"$vcopyenv_v\",\n    \"$vcopyenv_vt\",\n    \"$tempenver\",\n    \"$solver_assert\",\n    \"$solver_verify\"\n  ],\n  keywords_srp: [\n    \"#if\",\n    \"#ifdef\",\n    \"#ifndef\",\n    \"#then\",\n    \"#elif\",\n    \"#elifdef\",\n    \"#elifndef\",\n    \"#else\",\n    \"#endif\",\n    \"#error\",\n    \"#prerr\",\n    \"#print\",\n    \"#assert\",\n    \"#undef\",\n    \"#define\",\n    \"#include\",\n    \"#require\",\n    \"#pragma\",\n    \"#codegen2\",\n    \"#codegen3\"\n  ],\n  irregular_keyword_list: [\n    \"val+\",\n    \"val-\",\n    \"val\",\n    \"case+\",\n    \"case-\",\n    \"case\",\n    \"addr@\",\n    \"addr\",\n    \"fold@\",\n    \"free@\",\n    \"fix@\",\n    \"fix\",\n    \"lam@\",\n    \"lam\",\n    \"llam@\",\n    \"llam\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"view+\",\n    \"view-\",\n    \"view@\",\n    \"view\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"vtype+\",\n    \"vtype-\",\n    \"vtype\",\n    \"vt@ype+\",\n    \"vt@ype-\",\n    \"vt@ype\",\n    \"viewt@ype+\",\n    \"viewt@ype-\",\n    \"viewt@ype\",\n    \"viewtype+\",\n    \"viewtype-\",\n    \"viewtype\",\n    \"prop+\",\n    \"prop-\",\n    \"prop\",\n    \"type+\",\n    \"type-\",\n    \"type\",\n    \"t@ype\",\n    \"t@ype+\",\n    \"t@ype-\",\n    \"abst@ype\",\n    \"abstype\",\n    \"absviewt@ype\",\n    \"absvt@ype\",\n    \"for*\",\n    \"for\",\n    \"while*\",\n    \"while\"\n  ],\n  keywords_types: [\n    \"bool\",\n    \"double\",\n    \"byte\",\n    \"int\",\n    \"short\",\n    \"char\",\n    \"void\",\n    \"unit\",\n    \"long\",\n    \"float\",\n    \"string\",\n    \"strptr\"\n  ],\n  keywords_effects: [\n    \"0\",\n    \"fun\",\n    \"clo\",\n    \"prf\",\n    \"funclo\",\n    \"cloptr\",\n    \"cloref\",\n    \"ref\",\n    \"ntm\",\n    \"1\"\n  ],\n  operators: [\n    \"@\",\n    \"!\",\n    \"|\",\n    \"`\",\n    \":\",\n    \"$\",\n    \".\",\n    \"=\",\n    \"#\",\n    \"~\",\n    \"..\",\n    \"...\",\n    \"=>\",\n    \"=<>\",\n    \"=/=>\",\n    \"=>>\",\n    \"=/=>>\",\n    \"<\",\n    \">\",\n    \"><\",\n    \".<\",\n    \">.\",\n    \".<>.\",\n    \"->\",\n    \"-<>\"\n  ],\n  brackets: [\n    { open: \",(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"`(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"%(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"'{\", close: \"}\", token: \"delimiter.parenthesis\" },\n    { open: \"@(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"@{\", close: \"}\", token: \"delimiter.brace\" },\n    { open: \"@[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"#[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  IDENTFST: /[a-zA-Z_]/,\n  IDENTRST: /[a-zA-Z0-9_'$]/,\n  symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n  digit: /[0-9]/,\n  digitseq0: /@digit*/,\n  xdigit: /[0-9A-Za-z]/,\n  xdigitseq0: /@xdigit*/,\n  INTSP: /[lLuU]/,\n  FLOATSP: /[fFlL]/,\n  fexponent: /[eE][+-]?[0-9]+/,\n  fexponent_bin: /[pP][+-]?[0-9]+/,\n  deciexp: /\\.[0-9]*@fexponent?/,\n  hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n  irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n  ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n  start: \"root\",\n  tokenizer: {\n    root: [\n      { regex: /[ \\t\\r\\n]+/, action: { token: \"\" } },\n      { regex: /\\(\\*\\)/, action: { token: \"invalid\" } },\n      {\n        regex: /\\(\\*/,\n        action: { token: \"comment\", next: \"lexing_COMMENT_block_ml\" }\n      },\n      {\n        regex: /\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\)/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\]/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /\\}/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /,\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /,/, action: { token: \"delimiter.comma\" } },\n      { regex: /;/, action: { token: \"delimiter.semicolon\" } },\n      {\n        regex: /@\\(/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\[/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /@\\{/,\n        action: \"@brackets\"\n      },\n      {\n        regex: /:</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      { regex: /\\.@symbolic+/, action: { token: \"identifier.sym\" } },\n      {\n        regex: /\\.@digit*@fexponent@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /\\.@digit+/, action: { token: \"number.float\" } },\n      {\n        regex: /\\$@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_dlr\": { token: \"keyword.dlr\" },\n            \"@default\": { token: \"namespace\" }\n          }\n        }\n      },\n      {\n        regex: /\\#@IDENTFST@IDENTRST*/,\n        action: {\n          cases: {\n            \"@keywords_srp\": { token: \"keyword.srp\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /%\\(/, action: { token: \"delimiter.parenthesis\" } },\n      {\n        regex: /^%{(#|\\^|\\$)?/,\n        action: {\n          token: \"keyword\",\n          next: \"@lexing_EXTCODE\",\n          nextEmbedded: \"text/javascript\"\n        }\n      },\n      { regex: /^%}/, action: { token: \"keyword\" } },\n      { regex: /'\\(/, action: { token: \"delimiter.parenthesis\" } },\n      { regex: /'\\[/, action: { token: \"delimiter.bracket\" } },\n      { regex: /'\\{/, action: { token: \"delimiter.brace\" } },\n      [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'[^\\\\']'/, \"string\"],\n      [/\"/, \"string.quote\", \"@lexing_DQUOTE\"],\n      {\n        regex: /`\\(/,\n        action: \"@brackets\"\n      },\n      { regex: /\\\\/, action: { token: \"punctuation\" } },\n      {\n        regex: /@irregular_keywords(?!@IDENTRST)/,\n        action: { token: \"keyword\" }\n      },\n      {\n        regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@keywords_types\": { token: \"type\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      {\n        regex: /\\/\\/\\/\\//,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_rest\" }\n      },\n      { regex: /\\/\\/.*$/, action: { token: \"comment\" } },\n      {\n        regex: /\\/\\*/,\n        action: { token: \"comment\", next: \"@lexing_COMMENT_block_c\" }\n      },\n      {\n        regex: /-<|=</,\n        action: { token: \"keyword\", next: \"@lexing_EFFECT_commaseq0\" }\n      },\n      {\n        regex: /@symbolic+/,\n        action: {\n          cases: {\n            \"@operators\": \"keyword\",\n            \"@default\": \"operator\"\n          }\n        }\n      },\n      {\n        regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      { regex: /0[xX]@xdigit+@INTSP*/, action: { token: \"number.hex\" } },\n      {\n        regex: /0[0-7]+(?![0-9])@INTSP*/,\n        action: { token: \"number.octal\" }\n      },\n      {\n        regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/,\n        action: { token: \"number.float\" }\n      },\n      {\n        regex: /@digit@digitseq0@INTSP*/,\n        action: { token: \"number.decimal\" }\n      },\n      { regex: /@digit+@INTSP*/, action: { token: \"number\" } }\n    ],\n    lexing_COMMENT_block_ml: [\n      [/[^\\(\\*]+/, \"comment\"],\n      [/\\(\\*/, \"comment\", \"@push\"],\n      [/\\(\\*/, \"comment.invalid\"],\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\*/, \"comment\"]\n    ],\n    lexing_COMMENT_block_c: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    lexing_COMMENT_rest: [\n      [/$/, \"comment\", \"@pop\"],\n      [/.*/, \"comment\"]\n    ],\n    lexing_EFFECT_commaseq0: [\n      {\n        regex: /@IDENTFST@IDENTRST+|@digit+/,\n        action: {\n          cases: {\n            \"@keywords_effects\": { token: \"type.effect\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      },\n      { regex: /,/, action: { token: \"punctuation\" } },\n      { regex: />/, action: { token: \"@rematch\", next: \"@pop\" } }\n    ],\n    lexing_EXTCODE: [\n      {\n        regex: /^%}/,\n        action: {\n          token: \"@rematch\",\n          next: \"@pop\",\n          nextEmbedded: \"@pop\"\n        }\n      },\n      { regex: /[^%]+/, action: \"\" }\n    ],\n    lexing_DQUOTE: [\n      { regex: /\"/, action: { token: \"string.quote\", next: \"@pop\" } },\n      {\n        regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/,\n        action: [{ token: \"string.escape\" }, { token: \"identifier\" }, { token: \"string.escape\" }]\n      },\n      { regex: /\\\\$/, action: { token: \"string.escape\" } },\n      {\n        regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/,\n        action: { token: \"string.escape\" }\n      },\n      { regex: /[^\\\\\"]+/, action: { token: \"string\" } }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$cebe1434439e4e73$export$c83be1687c028fc9","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","$cebe1434439e4e73$export$789c912f57fe164c","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"version":3,"file":"postiats.ba0a122a.js.map"}