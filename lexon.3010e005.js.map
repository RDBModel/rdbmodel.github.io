{"mappings":"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","sources":["node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  tokenizer: {\n    root: [\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":[],"version":3,"file":"lexon.3010e005.js.map"}