{"mappings":";;;;;;;AAQA,IAAIA,EAAO,CACTC,YAAW,uFACXC,SAAU,CACRC,YAAa,KACbC,aAAc,CAAC,KAAM,OAEvBC,SAAU,CACR,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAERC,iBAAkB,CAChB,CAAEC,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,YAC3C,CAAEF,KAAM,IAAKC,MAAO,IAAKC,MAAO,CAAC,SAAU,aAE7CC,iBAAkB,CAChB,CAAEH,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,KACpB,CAAED,KAAM,IAAKC,MAAO,MAEtBG,QAAS,CACPC,QAAS,CACPC,MAAO,IAAIC,OAAO,mBAClBC,IAAK,IAAID,OAAO,yBAIlBE,EAAW,CACbC,aAAc,GACdC,aAAc,MACdb,SAAU,CACR,CAAEE,KAAM,IAAKC,MAAO,IAAKW,MAAO,mBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,yBAChC,CAAEZ,KAAM,IAAKC,MAAO,IAAKW,MAAO,oBAElCC,SAAU,CACR,SACA,QACA,QACA,OACA,UACA,QACA,OACA,QACA,SACA,MACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,UACA,SACA,WACA,KACA,KACA,MACA,MACA,OACA,OACA,MACA,SACA,OACA,UACA,YACA,UACA,WACA,MACA,QACA,KACA,OACA,SACA,OACA,QACA,KACA,MACA,UACA,KACA,QACA,WACA,OACA,SACA,QACA,MACA,QACA,UACA,OACA,QACA,OACA,MACA,QACA,OACA,KACA,SACA,OACA,UACA,YACA,aACA,SACA,QACA,KACA,YACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,YACA,WACA,UACA,WACA,SACA,SACA,SACA,WACA,WACA,UACA,WACA,SACA,MACA,MACA,MACA,SACA,WACA,OACA,QACA,WACA,WACA,YACA,OACA,OACA,QACA,QACA,QACA,SACA,aACA,SACA,SACA,QAEFC,iBAAkB,CAAC,YAAa,SAChCC,aAAc,CAAC,KAAM,MAAO,QAAS,SAAU,UAAW,QAAS,QAAS,QAC5EC,UAAW,CACT,IACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,MAEFC,QAAO,wBACPC,QAAO,wEACPC,UAAW,CACTC,KAAM,CACJ,mBAEE,CACEC,MAAO,CACL,oBAAqB,CACnBT,MAAO,aACPU,KAAM,cAER,YAAa,CACXV,MAAO,aACPU,KAAM,cAER,WAAY,CAAEV,MAAO,aAAcU,KAAM,iBAI/C,CAAEC,QAAS,eACX,KAEE,CACEF,MAAO,CACL,0BAA2B,CACzBT,MAAO,eACPU,KAAM,QAER,uBAAwB,CACtBV,MAAO,eACPU,KAAM,QAER,WAAY,eAIlB,cAAe,aACf,oBAAqB,aACrB,YAEE,CACED,MAAO,CACL,aAAc,YACd,WAAY,MAIlB,2CAA4C,gBAC5C,sBAAuB,cACvB,eAAgB,cAChB,WAAY,UACZ,SAAU,aACV,mBAAoB,kBACpB,KAAM,CAAET,MAAO,eAAgBU,KAAM,YACrC,SAAU,CAAEV,MAAO,eAAgBU,KAAM,qBACzC,OAAQ,CAAEV,MAAO,eAAgBU,KAAM,eACvC,OAAQ,CAAEV,MAAO,eAAgBU,KAAM,wBACvC,YAAa,UACb,oBAAqB,CAAC,SAAU,gBAAiB,WACjD,KAAM,mBAERE,UAAW,CACT,kBAEE,CACEH,MAAO,CACL,YAAa,CAAET,MAAO,cACtB,WAAY,gBAIlB,MAAO,aACP,CAAC,GAAI,GAAI,SAEXa,UAAW,CACT,CAAEF,QAAS,eACX,YAAa,aACb,SAAU,aACV,CAAC,GAAI,GAAI,SAEXG,QAAS,CACP,WAAY,WACZ,CAAC,OAAQ,UAAW,QACpB,SAAU,YAEZC,OAAQ,CACN,WAAY,UACZ,YAAa,iBACb,OAAQ,yBACR,KAAM,CAAEf,MAAO,eAAgBU,KAAM,UAEvCM,UAAW,CACT,SAAU,UACV,MAAO,iBACP,KAAM,CAAEhB,MAAO,eAAgBU,KAAM,UAEvCO,gBAAiB,CACf,UAAW,UACX,MAAO,iBACP,MAAO,iBACP,MAAO,iBACP,KAAM,CAAEjB,MAAO,eAAgBU,KAAM,yBACrC,KAAM,CAAEV,MAAO,eAAgBU,KAAM,UAEvCQ,mBAAoB,CAClB,YAAa,UACb,YAAa,iBACb,OAAQ,yBACR,MAAO,iBACP,MAAO,iBACP,KAAM,CAAElB,MAAO,eAAgBU,KAAM,4BACrC,KAAM,CAAEV,MAAO,eAAgBU,KAAM,UAEvCS,WAAY,CACV,kCAAmC,iBACnC,qBAAsB,iBACtB,kBAAmB,IACnB,QAAS,UAAW,YACpB,WAAY","sources":["node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],"sourcesContent":["/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.31.0(252e010eb73ddc2fa1a37c1dade7bf35d87106cd)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n// src/basic-languages/csharp/csharp.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cs\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  keywords: [\n    \"extern\",\n    \"alias\",\n    \"using\",\n    \"bool\",\n    \"decimal\",\n    \"sbyte\",\n    \"byte\",\n    \"short\",\n    \"ushort\",\n    \"int\",\n    \"uint\",\n    \"long\",\n    \"ulong\",\n    \"char\",\n    \"float\",\n    \"double\",\n    \"object\",\n    \"dynamic\",\n    \"string\",\n    \"assembly\",\n    \"is\",\n    \"as\",\n    \"ref\",\n    \"out\",\n    \"this\",\n    \"base\",\n    \"new\",\n    \"typeof\",\n    \"void\",\n    \"checked\",\n    \"unchecked\",\n    \"default\",\n    \"delegate\",\n    \"var\",\n    \"const\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"while\",\n    \"do\",\n    \"for\",\n    \"foreach\",\n    \"in\",\n    \"break\",\n    \"continue\",\n    \"goto\",\n    \"return\",\n    \"throw\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"lock\",\n    \"yield\",\n    \"from\",\n    \"let\",\n    \"where\",\n    \"join\",\n    \"on\",\n    \"equals\",\n    \"into\",\n    \"orderby\",\n    \"ascending\",\n    \"descending\",\n    \"select\",\n    \"group\",\n    \"by\",\n    \"namespace\",\n    \"partial\",\n    \"class\",\n    \"field\",\n    \"event\",\n    \"method\",\n    \"param\",\n    \"public\",\n    \"protected\",\n    \"internal\",\n    \"private\",\n    \"abstract\",\n    \"sealed\",\n    \"static\",\n    \"struct\",\n    \"readonly\",\n    \"volatile\",\n    \"virtual\",\n    \"override\",\n    \"params\",\n    \"get\",\n    \"set\",\n    \"add\",\n    \"remove\",\n    \"operator\",\n    \"true\",\n    \"false\",\n    \"implicit\",\n    \"explicit\",\n    \"interface\",\n    \"enum\",\n    \"null\",\n    \"async\",\n    \"await\",\n    \"fixed\",\n    \"sizeof\",\n    \"stackalloc\",\n    \"unsafe\",\n    \"nameof\",\n    \"when\"\n  ],\n  namespaceFollows: [\"namespace\", \"using\"],\n  parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"],\n  operators: [\n    \"=\",\n    \"??\",\n    \"||\",\n    \"&&\",\n    \"|\",\n    \"^\",\n    \"&\",\n    \"==\",\n    \"!=\",\n    \"<=\",\n    \">=\",\n    \"<<\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"!\",\n    \"~\",\n    \"++\",\n    \"--\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"%=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"<<=\",\n    \">>=\",\n    \">>\",\n    \"=>\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [\n      [\n        /\\@?[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@namespaceFollows\": {\n              token: \"keyword.$0\",\n              next: \"@namespace\"\n            },\n            \"@keywords\": {\n              token: \"keyword.$0\",\n              next: \"@qualified\"\n            },\n            \"@default\": { token: \"identifier\", next: \"@qualified\" }\n          }\n        }\n      ],\n      { include: \"@whitespace\" },\n      [\n        /}/,\n        {\n          cases: {\n            \"$S2==interpolatedstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"$S2==litinterpstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"@default\": \"@brackets\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\n      [/0[bB][01_]+/, \"number.hex\"],\n      [/[0-9_]+/, \"number\"],\n      [/[;,.]/, \"delimiter\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, { token: \"string.quote\", next: \"@string\" }],\n      [/\\$\\@\"/, { token: \"string.quote\", next: \"@litinterpstring\" }],\n      [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }],\n      [/\\$\"/, { token: \"string.quote\", next: \"@interpolatedstring\" }],\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    qualified: [\n      [\n        /[a-zA-Z_][\\w]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\./, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    namespace: [\n      { include: \"@whitespace\" },\n      [/[A-Z]\\w*/, \"namespace\"],\n      [/[\\.=]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litstring: [\n      [/[^\"]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litinterpstring: [\n      [/[^\"{]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.litinterpstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    interpolatedstring: [\n      [/[^\\\\\"{]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    whitespace: [\n      [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"],\n      [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"],\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$83c9113cc998c0ff$export$c83be1687c028fc9","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","$83c9113cc998c0ff$export$789c912f57fe164c","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","next","include","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"version":3,"file":"csharp.21424fa9.js.map"}